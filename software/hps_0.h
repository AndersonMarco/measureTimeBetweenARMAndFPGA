#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file 'soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'pio_output', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT_COMPONENT_NAME pio_output
#define PIO_OUTPUT_BASE 0x10170
#define PIO_OUTPUT_SPAN 16
#define PIO_OUTPUT_END 0x1005f
#define PIO_OUTPUT_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT_CAPTURE 0
#define PIO_OUTPUT_DATA_WIDTH 32
#define PIO_OUTPUT_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT_EDGE_TYPE NONE
#define PIO_OUTPUT_FREQ 50000000
#define PIO_OUTPUT_HAS_IN 0
#define PIO_OUTPUT_HAS_OUT 1
#define PIO_OUTPUT_HAS_TRI 0
#define PIO_OUTPUT_IRQ_TYPE NONE
#define PIO_OUTPUT_RESET_VALUE 1023

/*
 * Macros for device 'pio_output2', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT2_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT2_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT2_COMPONENT_NAME pio_output2
#define PIO_OUTPUT2_BASE 0x10060
#define PIO_OUTPUT2_SPAN 16
#define PIO_OUTPUT2_END 0x1006f
#define PIO_OUTPUT2_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT2_CAPTURE 0
#define PIO_OUTPUT2_DATA_WIDTH 32
#define PIO_OUTPUT2_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT2_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT2_EDGE_TYPE NONE
#define PIO_OUTPUT2_FREQ 50000000
#define PIO_OUTPUT2_HAS_IN 0
#define PIO_OUTPUT2_HAS_OUT 1
#define PIO_OUTPUT2_HAS_TRI 0
#define PIO_OUTPUT2_IRQ_TYPE NONE
#define PIO_OUTPUT2_RESET_VALUE 1023

/*
 * Macros for device 'pio_output3', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT3_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT3_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT3_COMPONENT_NAME pio_output3
#define PIO_OUTPUT3_BASE 0x10070
#define PIO_OUTPUT3_SPAN 16
#define PIO_OUTPUT3_END 0x1007f
#define PIO_OUTPUT3_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT3_CAPTURE 0
#define PIO_OUTPUT3_DATA_WIDTH 32
#define PIO_OUTPUT3_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT3_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT3_EDGE_TYPE NONE
#define PIO_OUTPUT3_FREQ 50000000
#define PIO_OUTPUT3_HAS_IN 0
#define PIO_OUTPUT3_HAS_OUT 1
#define PIO_OUTPUT3_HAS_TRI 0
#define PIO_OUTPUT3_IRQ_TYPE NONE
#define PIO_OUTPUT3_RESET_VALUE 1023

/*
 * Macros for device 'pio_output4', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT4_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT4_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT4_COMPONENT_NAME pio_output4
#define PIO_OUTPUT4_BASE 0x10080
#define PIO_OUTPUT4_SPAN 16
#define PIO_OUTPUT4_END 0x1008f
#define PIO_OUTPUT4_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT4_CAPTURE 0
#define PIO_OUTPUT4_DATA_WIDTH 32
#define PIO_OUTPUT4_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT4_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT4_EDGE_TYPE NONE
#define PIO_OUTPUT4_FREQ 50000000
#define PIO_OUTPUT4_HAS_IN 0
#define PIO_OUTPUT4_HAS_OUT 1
#define PIO_OUTPUT4_HAS_TRI 0
#define PIO_OUTPUT4_IRQ_TYPE NONE
#define PIO_OUTPUT4_RESET_VALUE 1023

/*
 * Macros for device 'pio_output5', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT5_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT5_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT5_COMPONENT_NAME pio_output5
#define PIO_OUTPUT5_BASE 0x10090
#define PIO_OUTPUT5_SPAN 16
#define PIO_OUTPUT5_END 0x1009f
#define PIO_OUTPUT5_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT5_CAPTURE 0
#define PIO_OUTPUT5_DATA_WIDTH 32
#define PIO_OUTPUT5_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT5_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT5_EDGE_TYPE NONE
#define PIO_OUTPUT5_FREQ 50000000
#define PIO_OUTPUT5_HAS_IN 0
#define PIO_OUTPUT5_HAS_OUT 1
#define PIO_OUTPUT5_HAS_TRI 0
#define PIO_OUTPUT5_IRQ_TYPE NONE
#define PIO_OUTPUT5_RESET_VALUE 1023

/*
 * Macros for device 'pio_output6', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT6_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT6_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT6_COMPONENT_NAME pio_output6
#define PIO_OUTPUT6_BASE 0x100a0
#define PIO_OUTPUT6_SPAN 16
#define PIO_OUTPUT6_END 0x100af
#define PIO_OUTPUT6_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT6_CAPTURE 0
#define PIO_OUTPUT6_DATA_WIDTH 32
#define PIO_OUTPUT6_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT6_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT6_EDGE_TYPE NONE
#define PIO_OUTPUT6_FREQ 50000000
#define PIO_OUTPUT6_HAS_IN 0
#define PIO_OUTPUT6_HAS_OUT 1
#define PIO_OUTPUT6_HAS_TRI 0
#define PIO_OUTPUT6_IRQ_TYPE NONE
#define PIO_OUTPUT6_RESET_VALUE 1023

/*
 * Macros for device 'pio_output7', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT7_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT7_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT7_COMPONENT_NAME pio_output7
#define PIO_OUTPUT7_BASE 0x100b0
#define PIO_OUTPUT7_SPAN 16
#define PIO_OUTPUT7_END 0x100bf
#define PIO_OUTPUT7_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT7_CAPTURE 0
#define PIO_OUTPUT7_DATA_WIDTH 32
#define PIO_OUTPUT7_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT7_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT7_EDGE_TYPE NONE
#define PIO_OUTPUT7_FREQ 50000000
#define PIO_OUTPUT7_HAS_IN 0
#define PIO_OUTPUT7_HAS_OUT 1
#define PIO_OUTPUT7_HAS_TRI 0
#define PIO_OUTPUT7_IRQ_TYPE NONE
#define PIO_OUTPUT7_RESET_VALUE 1023

/*
 * Macros for device 'pio_output8', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT8_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT8_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT8_COMPONENT_NAME pio_output8
#define PIO_OUTPUT8_BASE 0x100c0
#define PIO_OUTPUT8_SPAN 16
#define PIO_OUTPUT8_END 0x100cf
#define PIO_OUTPUT8_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT8_CAPTURE 0
#define PIO_OUTPUT8_DATA_WIDTH 32
#define PIO_OUTPUT8_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT8_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT8_EDGE_TYPE NONE
#define PIO_OUTPUT8_FREQ 50000000
#define PIO_OUTPUT8_HAS_IN 0
#define PIO_OUTPUT8_HAS_OUT 1
#define PIO_OUTPUT8_HAS_TRI 0
#define PIO_OUTPUT8_IRQ_TYPE NONE
#define PIO_OUTPUT8_RESET_VALUE 1023

/*
 * Macros for device 'pio_output9', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT9_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT9_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT9_COMPONENT_NAME pio_output9
#define PIO_OUTPUT9_BASE 0x100d0
#define PIO_OUTPUT9_SPAN 16
#define PIO_OUTPUT9_END 0x100df
#define PIO_OUTPUT9_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT9_CAPTURE 0
#define PIO_OUTPUT9_DATA_WIDTH 32
#define PIO_OUTPUT9_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT9_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT9_EDGE_TYPE NONE
#define PIO_OUTPUT9_FREQ 50000000
#define PIO_OUTPUT9_HAS_IN 0
#define PIO_OUTPUT9_HAS_OUT 1
#define PIO_OUTPUT9_HAS_TRI 0
#define PIO_OUTPUT9_IRQ_TYPE NONE
#define PIO_OUTPUT9_RESET_VALUE 1023

/*
 * Macros for device 'pio_output10', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT10_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT10_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT10_COMPONENT_NAME pio_output10
#define PIO_OUTPUT10_BASE 0x100e0
#define PIO_OUTPUT10_SPAN 16
#define PIO_OUTPUT10_END 0x100ef
#define PIO_OUTPUT10_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT10_CAPTURE 0
#define PIO_OUTPUT10_DATA_WIDTH 32
#define PIO_OUTPUT10_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT10_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT10_EDGE_TYPE NONE
#define PIO_OUTPUT10_FREQ 50000000
#define PIO_OUTPUT10_HAS_IN 0
#define PIO_OUTPUT10_HAS_OUT 1
#define PIO_OUTPUT10_HAS_TRI 0
#define PIO_OUTPUT10_IRQ_TYPE NONE
#define PIO_OUTPUT10_RESET_VALUE 1023

/*
 * Macros for device 'pio_output11', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT11_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT11_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT11_COMPONENT_NAME pio_output11
#define PIO_OUTPUT11_BASE 0x100f0
#define PIO_OUTPUT11_SPAN 16
#define PIO_OUTPUT11_END 0x100ff
#define PIO_OUTPUT11_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT11_CAPTURE 0
#define PIO_OUTPUT11_DATA_WIDTH 32
#define PIO_OUTPUT11_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT11_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT11_EDGE_TYPE NONE
#define PIO_OUTPUT11_FREQ 50000000
#define PIO_OUTPUT11_HAS_IN 0
#define PIO_OUTPUT11_HAS_OUT 1
#define PIO_OUTPUT11_HAS_TRI 0
#define PIO_OUTPUT11_IRQ_TYPE NONE
#define PIO_OUTPUT11_RESET_VALUE 1023

/*
 * Macros for device 'pio_output12', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT12_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT12_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT12_COMPONENT_NAME pio_output12
#define PIO_OUTPUT12_BASE 0x10100
#define PIO_OUTPUT12_SPAN 16
#define PIO_OUTPUT12_END 0x1010f
#define PIO_OUTPUT12_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT12_CAPTURE 0
#define PIO_OUTPUT12_DATA_WIDTH 32
#define PIO_OUTPUT12_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT12_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT12_EDGE_TYPE NONE
#define PIO_OUTPUT12_FREQ 50000000
#define PIO_OUTPUT12_HAS_IN 0
#define PIO_OUTPUT12_HAS_OUT 1
#define PIO_OUTPUT12_HAS_TRI 0
#define PIO_OUTPUT12_IRQ_TYPE NONE
#define PIO_OUTPUT12_RESET_VALUE 1023

/*
 * Macros for device 'pio_output13', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT13_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT13_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT13_COMPONENT_NAME pio_output13
#define PIO_OUTPUT13_BASE 0x10110
#define PIO_OUTPUT13_SPAN 16
#define PIO_OUTPUT13_END 0x1011f
#define PIO_OUTPUT13_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT13_CAPTURE 0
#define PIO_OUTPUT13_DATA_WIDTH 32
#define PIO_OUTPUT13_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT13_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT13_EDGE_TYPE NONE
#define PIO_OUTPUT13_FREQ 50000000
#define PIO_OUTPUT13_HAS_IN 0
#define PIO_OUTPUT13_HAS_OUT 1
#define PIO_OUTPUT13_HAS_TRI 0
#define PIO_OUTPUT13_IRQ_TYPE NONE
#define PIO_OUTPUT13_RESET_VALUE 1023

/*
 * Macros for device 'pio_output14', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT14_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT14_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT14_COMPONENT_NAME pio_output14
#define PIO_OUTPUT14_BASE 0x10120
#define PIO_OUTPUT14_SPAN 16
#define PIO_OUTPUT14_END 0x1012f
#define PIO_OUTPUT14_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT14_CAPTURE 0
#define PIO_OUTPUT14_DATA_WIDTH 32
#define PIO_OUTPUT14_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT14_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT14_EDGE_TYPE NONE
#define PIO_OUTPUT14_FREQ 50000000
#define PIO_OUTPUT14_HAS_IN 0
#define PIO_OUTPUT14_HAS_OUT 1
#define PIO_OUTPUT14_HAS_TRI 0
#define PIO_OUTPUT14_IRQ_TYPE NONE
#define PIO_OUTPUT14_RESET_VALUE 1023

/*
 * Macros for device 'pio_output15', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT15_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT15_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT15_COMPONENT_NAME pio_output15
#define PIO_OUTPUT15_BASE 0x10130
#define PIO_OUTPUT15_SPAN 16
#define PIO_OUTPUT15_END 0x1013f
#define PIO_OUTPUT15_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT15_CAPTURE 0
#define PIO_OUTPUT15_DATA_WIDTH 32
#define PIO_OUTPUT15_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT15_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT15_EDGE_TYPE NONE
#define PIO_OUTPUT15_FREQ 50000000
#define PIO_OUTPUT15_HAS_IN 0
#define PIO_OUTPUT15_HAS_OUT 1
#define PIO_OUTPUT15_HAS_TRI 0
#define PIO_OUTPUT15_IRQ_TYPE NONE
#define PIO_OUTPUT15_RESET_VALUE 1023

/*
 * Macros for device 'pio_output16', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_OUTPUT16_'.
 * The prefix is the slave descriptor.
 */
#define PIO_OUTPUT16_COMPONENT_TYPE altera_avalon_pio
#define PIO_OUTPUT16_COMPONENT_NAME pio_output16
#define PIO_OUTPUT16_BASE 0x10140
#define PIO_OUTPUT16_SPAN 16
#define PIO_OUTPUT16_END 0x1014f
#define PIO_OUTPUT16_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_OUTPUT16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_OUTPUT16_CAPTURE 0
#define PIO_OUTPUT16_DATA_WIDTH 32
#define PIO_OUTPUT16_DO_TEST_BENCH_WIRING 0
#define PIO_OUTPUT16_DRIVEN_SIM_VALUE 0
#define PIO_OUTPUT16_EDGE_TYPE NONE
#define PIO_OUTPUT16_FREQ 50000000
#define PIO_OUTPUT16_HAS_IN 0
#define PIO_OUTPUT16_HAS_OUT 1
#define PIO_OUTPUT16_HAS_TRI 0
#define PIO_OUTPUT16_IRQ_TYPE NONE
#define PIO_OUTPUT16_RESET_VALUE 1023

/*
 * Macros for device 'pio_input', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT_COMPONENT_NAME pio_input
#define PIO_INPUT_BASE 0x10070
#define PIO_INPUT_SPAN 16
#define PIO_INPUT_END 0x0005f
#define PIO_INPUT_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT_CAPTURE 0
#define PIO_INPUT_DATA_WIDTH 32
#define PIO_INPUT_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT_DRIVEN_SIM_VALUE 0
#define PIO_INPUT_EDGE_TYPE NONE
#define PIO_INPUT_FREQ 50000000
#define PIO_INPUT_HAS_IN 1
#define PIO_INPUT_HAS_OUT 0
#define PIO_INPUT_HAS_TRI 0
#define PIO_INPUT_IRQ_TYPE NONE
#define PIO_INPUT_RESET_VALUE 0

/*
 * Macros for device 'pio_input2', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT2_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT2_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT2_COMPONENT_NAME pio_input2
#define PIO_INPUT2_BASE 0x10080
#define PIO_INPUT2_SPAN 16
#define PIO_INPUT2_END 0x0006f
#define PIO_INPUT2_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT2_CAPTURE 0
#define PIO_INPUT2_DATA_WIDTH 32
#define PIO_INPUT2_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT2_DRIVEN_SIM_VALUE 0
#define PIO_INPUT2_EDGE_TYPE NONE
#define PIO_INPUT2_FREQ 50000000
#define PIO_INPUT2_HAS_IN 1
#define PIO_INPUT2_HAS_OUT 0
#define PIO_INPUT2_HAS_TRI 0
#define PIO_INPUT2_IRQ_TYPE NONE
#define PIO_INPUT2_RESET_VALUE 0

/*
 * Macros for device 'pio_input3', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT3_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT3_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT3_COMPONENT_NAME pio_input3
#define PIO_INPUT3_BASE 0x00070
#define PIO_INPUT3_SPAN 16
#define PIO_INPUT3_END 0x0007f
#define PIO_INPUT3_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT3_CAPTURE 0
#define PIO_INPUT3_DATA_WIDTH 32
#define PIO_INPUT3_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT3_DRIVEN_SIM_VALUE 0
#define PIO_INPUT3_EDGE_TYPE NONE
#define PIO_INPUT3_FREQ 50000000
#define PIO_INPUT3_HAS_IN 1
#define PIO_INPUT3_HAS_OUT 0
#define PIO_INPUT3_HAS_TRI 0
#define PIO_INPUT3_IRQ_TYPE NONE
#define PIO_INPUT3_RESET_VALUE 0

/*
 * Macros for device 'pio_input4', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT4_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT4_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT4_COMPONENT_NAME pio_input4
#define PIO_INPUT4_BASE 0x00080
#define PIO_INPUT4_SPAN 16
#define PIO_INPUT4_END 0x0008f
#define PIO_INPUT4_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT4_CAPTURE 0
#define PIO_INPUT4_DATA_WIDTH 32
#define PIO_INPUT4_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT4_DRIVEN_SIM_VALUE 0
#define PIO_INPUT4_EDGE_TYPE NONE
#define PIO_INPUT4_FREQ 50000000
#define PIO_INPUT4_HAS_IN 1
#define PIO_INPUT4_HAS_OUT 0
#define PIO_INPUT4_HAS_TRI 0
#define PIO_INPUT4_IRQ_TYPE NONE
#define PIO_INPUT4_RESET_VALUE 0

/*
 * Macros for device 'pio_input5', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT5_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT5_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT5_COMPONENT_NAME pio_input5
#define PIO_INPUT5_BASE 0x00090
#define PIO_INPUT5_SPAN 16
#define PIO_INPUT5_END 0x0009f
#define PIO_INPUT5_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT5_CAPTURE 0
#define PIO_INPUT5_DATA_WIDTH 32
#define PIO_INPUT5_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT5_DRIVEN_SIM_VALUE 0
#define PIO_INPUT5_EDGE_TYPE NONE
#define PIO_INPUT5_FREQ 50000000
#define PIO_INPUT5_HAS_IN 0
#define PIO_INPUT5_HAS_OUT 1
#define PIO_INPUT5_HAS_TRI 0
#define PIO_INPUT5_IRQ_TYPE NONE
#define PIO_INPUT5_RESET_VALUE 0

/*
 * Macros for device 'pio_input6', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT6_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT6_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT6_COMPONENT_NAME pio_input6
#define PIO_INPUT6_BASE 0x000a0
#define PIO_INPUT6_SPAN 16
#define PIO_INPUT6_END 0x000af
#define PIO_INPUT6_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT6_CAPTURE 0
#define PIO_INPUT6_DATA_WIDTH 32
#define PIO_INPUT6_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT6_DRIVEN_SIM_VALUE 0
#define PIO_INPUT6_EDGE_TYPE NONE
#define PIO_INPUT6_FREQ 50000000
#define PIO_INPUT6_HAS_IN 1
#define PIO_INPUT6_HAS_OUT 0
#define PIO_INPUT6_HAS_TRI 0
#define PIO_INPUT6_IRQ_TYPE NONE
#define PIO_INPUT6_RESET_VALUE 0

/*
 * Macros for device 'pio_input7', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT7_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT7_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT7_COMPONENT_NAME pio_input7
#define PIO_INPUT7_BASE 0x000b0
#define PIO_INPUT7_SPAN 16
#define PIO_INPUT7_END 0x000bf
#define PIO_INPUT7_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT7_CAPTURE 0
#define PIO_INPUT7_DATA_WIDTH 32
#define PIO_INPUT7_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT7_DRIVEN_SIM_VALUE 0
#define PIO_INPUT7_EDGE_TYPE NONE
#define PIO_INPUT7_FREQ 50000000
#define PIO_INPUT7_HAS_IN 1
#define PIO_INPUT7_HAS_OUT 0
#define PIO_INPUT7_HAS_TRI 0
#define PIO_INPUT7_IRQ_TYPE NONE
#define PIO_INPUT7_RESET_VALUE 0

/*
 * Macros for device 'pio_input8', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT8_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT8_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT8_COMPONENT_NAME pio_input8
#define PIO_INPUT8_BASE 0x000c0
#define PIO_INPUT8_SPAN 16
#define PIO_INPUT8_END 0x000cf
#define PIO_INPUT8_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT8_CAPTURE 0
#define PIO_INPUT8_DATA_WIDTH 32
#define PIO_INPUT8_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT8_DRIVEN_SIM_VALUE 0
#define PIO_INPUT8_EDGE_TYPE NONE
#define PIO_INPUT8_FREQ 50000000
#define PIO_INPUT8_HAS_IN 1
#define PIO_INPUT8_HAS_OUT 0
#define PIO_INPUT8_HAS_TRI 0
#define PIO_INPUT8_IRQ_TYPE NONE
#define PIO_INPUT8_RESET_VALUE 0

/*
 * Macros for device 'pio_input9', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT9_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT9_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT9_COMPONENT_NAME pio_input9
#define PIO_INPUT9_BASE 0x000d0
#define PIO_INPUT9_SPAN 16
#define PIO_INPUT9_END 0x000df
#define PIO_INPUT9_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT9_CAPTURE 0
#define PIO_INPUT9_DATA_WIDTH 32
#define PIO_INPUT9_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT9_DRIVEN_SIM_VALUE 0
#define PIO_INPUT9_EDGE_TYPE NONE
#define PIO_INPUT9_FREQ 50000000
#define PIO_INPUT9_HAS_IN 1
#define PIO_INPUT9_HAS_OUT 0
#define PIO_INPUT9_HAS_TRI 0
#define PIO_INPUT9_IRQ_TYPE NONE
#define PIO_INPUT9_RESET_VALUE 0

/*
 * Macros for device 'pio_input10', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT10_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT10_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT10_COMPONENT_NAME pio_input10
#define PIO_INPUT10_BASE 0x000e0
#define PIO_INPUT10_SPAN 16
#define PIO_INPUT10_END 0x000ef
#define PIO_INPUT10_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT10_CAPTURE 0
#define PIO_INPUT10_DATA_WIDTH 32
#define PIO_INPUT10_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT10_DRIVEN_SIM_VALUE 0
#define PIO_INPUT10_EDGE_TYPE NONE
#define PIO_INPUT10_FREQ 50000000
#define PIO_INPUT10_HAS_IN 1
#define PIO_INPUT10_HAS_OUT 0
#define PIO_INPUT10_HAS_TRI 0
#define PIO_INPUT10_IRQ_TYPE NONE
#define PIO_INPUT10_RESET_VALUE 0

/*
 * Macros for device 'pio_input11', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT11_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT11_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT11_COMPONENT_NAME pio_input11
#define PIO_INPUT11_BASE 0x000f0
#define PIO_INPUT11_SPAN 16
#define PIO_INPUT11_END 0x000ff
#define PIO_INPUT11_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT11_CAPTURE 0
#define PIO_INPUT11_DATA_WIDTH 32
#define PIO_INPUT11_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT11_DRIVEN_SIM_VALUE 0
#define PIO_INPUT11_EDGE_TYPE NONE
#define PIO_INPUT11_FREQ 50000000
#define PIO_INPUT11_HAS_IN 1
#define PIO_INPUT11_HAS_OUT 0
#define PIO_INPUT11_HAS_TRI 0
#define PIO_INPUT11_IRQ_TYPE NONE
#define PIO_INPUT11_RESET_VALUE 0

/*
 * Macros for device 'pio_input12', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT12_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT12_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT12_COMPONENT_NAME pio_input12
#define PIO_INPUT12_BASE 0x00100
#define PIO_INPUT12_SPAN 16
#define PIO_INPUT12_END 0x0010f
#define PIO_INPUT12_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT12_CAPTURE 0
#define PIO_INPUT12_DATA_WIDTH 32
#define PIO_INPUT12_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT12_DRIVEN_SIM_VALUE 0
#define PIO_INPUT12_EDGE_TYPE NONE
#define PIO_INPUT12_FREQ 50000000
#define PIO_INPUT12_HAS_IN 1
#define PIO_INPUT12_HAS_OUT 0
#define PIO_INPUT12_HAS_TRI 0
#define PIO_INPUT12_IRQ_TYPE NONE
#define PIO_INPUT12_RESET_VALUE 0

/*
 * Macros for device 'pio_input13', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT13_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT13_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT13_COMPONENT_NAME pio_input13
#define PIO_INPUT13_BASE 0x00110
#define PIO_INPUT13_SPAN 16
#define PIO_INPUT13_END 0x0011f
#define PIO_INPUT13_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT13_CAPTURE 0
#define PIO_INPUT13_DATA_WIDTH 32
#define PIO_INPUT13_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT13_DRIVEN_SIM_VALUE 0
#define PIO_INPUT13_EDGE_TYPE NONE
#define PIO_INPUT13_FREQ 50000000
#define PIO_INPUT13_HAS_IN 1
#define PIO_INPUT13_HAS_OUT 0
#define PIO_INPUT13_HAS_TRI 0
#define PIO_INPUT13_IRQ_TYPE NONE
#define PIO_INPUT13_RESET_VALUE 0

/*
 * Macros for device 'pio_input14', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT14_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT14_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT14_COMPONENT_NAME pio_input14
#define PIO_INPUT14_BASE 0x00120
#define PIO_INPUT14_SPAN 16
#define PIO_INPUT14_END 0x0012f
#define PIO_INPUT14_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT14_CAPTURE 0
#define PIO_INPUT14_DATA_WIDTH 32
#define PIO_INPUT14_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT14_DRIVEN_SIM_VALUE 0
#define PIO_INPUT14_EDGE_TYPE NONE
#define PIO_INPUT14_FREQ 50000000
#define PIO_INPUT14_HAS_IN 1
#define PIO_INPUT14_HAS_OUT 0
#define PIO_INPUT14_HAS_TRI 0
#define PIO_INPUT14_IRQ_TYPE NONE
#define PIO_INPUT14_RESET_VALUE 0

/*
 * Macros for device 'pio_input15', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT15_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT15_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT15_COMPONENT_NAME pio_input15
#define PIO_INPUT15_BASE 0x00130
#define PIO_INPUT15_SPAN 16
#define PIO_INPUT15_END 0x0013f
#define PIO_INPUT15_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT15_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT15_CAPTURE 0
#define PIO_INPUT15_DATA_WIDTH 32
#define PIO_INPUT15_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT15_DRIVEN_SIM_VALUE 0
#define PIO_INPUT15_EDGE_TYPE NONE
#define PIO_INPUT15_FREQ 50000000
#define PIO_INPUT15_HAS_IN 1
#define PIO_INPUT15_HAS_OUT 0
#define PIO_INPUT15_HAS_TRI 0
#define PIO_INPUT15_IRQ_TYPE NONE
#define PIO_INPUT15_RESET_VALUE 0

/*
 * Macros for device 'pio_input16', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_INPUT16_'.
 * The prefix is the slave descriptor.
 */
#define PIO_INPUT16_COMPONENT_TYPE altera_avalon_pio
#define PIO_INPUT16_COMPONENT_NAME pio_input16
#define PIO_INPUT16_BASE 0x00140
#define PIO_INPUT16_SPAN 16
#define PIO_INPUT16_END 0x0014f
#define PIO_INPUT16_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_INPUT16_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_INPUT16_CAPTURE 0
#define PIO_INPUT16_DATA_WIDTH 32
#define PIO_INPUT16_DO_TEST_BENCH_WIRING 0
#define PIO_INPUT16_DRIVEN_SIM_VALUE 0
#define PIO_INPUT16_EDGE_TYPE NONE
#define PIO_INPUT16_FREQ 50000000
#define PIO_INPUT16_HAS_IN 1
#define PIO_INPUT16_HAS_OUT 0
#define PIO_INPUT16_HAS_TRI 0
#define PIO_INPUT16_IRQ_TYPE NONE
#define PIO_INPUT16_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
